===================================================================
 E-commerce Workflow Guide: Razorpay -> MySQL -> Shiprocket -> MailerSend
===================================================================

This guide outlines the step-by-step process for creating a fully automated
e-commerce order fulfillment system.

---
### Workflow Overview ###

Customer Clicks Pay -> Backend Creates Pending Order -> Razorpay Checkout ->
Payment Success -> Razorpay Webhook -> Backend Verifies & Processes:
  1. Update MySQL order to 'paid'
  2. Create Shiprocket order
  3. Send MailerSend confirmation email

---
### Section 1: Prerequisites - Credentials Needed ###

Before you begin, ensure you have the following credentials ready:

* Razorpay Account:
    - Key ID
    - Key Secret
    - Webhook Secret

* Shiprocket Account:
    - API User Email
    - API Password

* MailerSend Account:
    - API Token
    - A verified domain (with SPF/DKIM records set up)

---

### Section 2: The Live Workflow Steps ###

Step 1: Customer Clicks "Pay" (Frontend)
- The frontend gathers cart/customer data and sends it to your backend API.

Step 2: Create a Pending Order (Backend)
- a. Insert a new row into the MySQL 'orders' table with 'order_status' set to 'pending'.
- b. Call the Razorpay API to create a payment order.
- c. Update your MySQL row with the 'razorpay_order_id' from Razorpay.
- d. Send the 'razorpay_order_id' back to the frontend.

Step 3: Razorpay Checkout (Frontend)
- The frontend uses the 'razorpay_order_id' to open the Razorpay payment modal.

Step 4: Webhook from Razorpay
- After a successful payment, Razorpay sends a 'payment.captured' event to your backend webhook URL.

Step 5: The Webhook Handler (Backend Core Logic)
This is the automated part of the process.

- a. Verify Webhook Signature: CRITICAL for security. Check the 'x-razorpay-signature' header using your webhook secret. If it fails, stop.

- b. Find and Update Order in MySQL:
    - Get the 'razorpay_order_id' from the webhook payload.
    - Find the order in your database.
    - Update its 'order_status' from 'pending' to 'paid'.
    - Save the 'razorpay_payment_id'.

- c. Create Shiprocket Order:
    - Use customer details from your database to make an API call to Shiprocket.
    - Save the returned 'shiprocket_order_id' to your database for tracking.

- d. Send Confirmation Email with MailerSend:
    - Use the MailerSend API with your API Token.
    - Send an email using a pre-designed template.
    - Pass dynamic data like customer name, order ID, and total amount to the template.

---
